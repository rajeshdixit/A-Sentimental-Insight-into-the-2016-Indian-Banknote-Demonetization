#access token secret obtained from the twitter application
setup_twitter_oauth(consumer_key ,consumer_secret, access_token,  access_token_secret )
library(ROAuth)
library(twitteR)
consumer_key <- "yTVCicT8n4B6CZGYXLbCpYdQ1"
#consumer key obtained from the twitter application
consumer_secret <- "0tcrQIfyLxOfGuWuRxfZQtLgEv2yCWLrOKPBh7Ww0q9P4yyN1P"
#consumer secret obtained from the twitter application
access_token <- "809857130597490688-R5XU9nu1ur1O2Ox5XZ49Vo7Kd1gppol"
#access token obtained from the twitter application
access_token_secret <- "Qu1u5aEZfls2o7ITG9xv06Tw7XSkPbCGRUGQhDW3vJXwy"
#access token secret obtained from the twitter application
setup_twitter_oauth(consumer_key ,consumer_secret, access_token,  access_token_secret )
download.file(url = "https://curl.haxx.se/ca/cacert.pem",
destfile = "G:/R/2016 Indian Banknote Demonetization/cacert.pem",
method = "auto")
download.file(url = "http://curl.haxx.se/libcurl/",
destfile = "G:/R/2016 Indian Banknote Demonetization/libcurl.pem",
method = "auto")
# download.file() is used to download content from the web
# url is the source
# destfile is destination where the file is to be downloaded to
# Twitter Authentication process
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
my_oauth <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = reqURL,
accessURL = accessURL,
authURL = authURL)
# the new step will launch twitter from Rstudio
my_oauth$handshake(cainfo ="G:/R/2016 Indian Banknote Demonetization/cacert.pem")
save(my_oauth, file = "twitter authentication.Rdata")
#setup_twitter_oauth(key, secret, access_token=NULL, access_secret=NULL)
load("twitter authentication.Rdata")
#Once you launched the code first time, you can start from this line in the future (libraries should be connected)
#After this you will be redirected to a URL where you click on authorize app and get the passkey to be entered in RStudio
library(ROAuth)
library(twitteR)
consumer_key <- "zTe9jVBVYdi77lxeldLOkBHzz"
consumer_secret <- "VfEgXsRjVJnddsIbscbR9sZDaVGmFWhn8s3NQu3et1y1d9h3eS"
access_token <- "145181414-DrFvsFU8mWVLO02O9sK8sqx4O42roxSSmfyF6eUB"
access_token_secret <- "3PvjIiW2ZoGTsaOVH5aCfZXYfAC8gMJeaScRCGFds8grt"
setup_twitter_oauth(consumer_key ,consumer_secret, access_token,  access_token_secret )
download.file(url = "https://curl.haxx.se/ca/cacert.pem",
destfile = "G:/R/2016 Indian Banknote Demonetization/cacert.pem",
method = "auto")
download.file(url = "http://curl.haxx.se/libcurl/",
destfile = "G:/R/2016 Indian Banknote Demonetization/libcurl.pem",
method = "auto")
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
my_oauth <- OAuthFactory$new(consumerKey = consumer_key,
consumerSecret = consumer_secret,
requestURL = reqURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo ="G:/R/2016 Indian Banknote Demonetization/cacert.pem")
save(my_oauth, file = "twitter authentication.Rdata")
load("twitter authentication.Rdata")
pos.words = scan('G:/R/2016 Indian Banknote Demonetization/positive_words.txt', what='character', comment.char=';')
neg.words = scan('G:/R/2016 Indian Banknote Demonetization/negative_words.txt', what='character', comment.char=';')
pos.words=c(pos.words, 'Congrats', 'prizes', 'prize', 'thanks', 'thnx', 'Grt', 'gr8', 'plz', 'trending', 'recovering', 'brainstorm', 'leader')
neg.words = c(neg.words, 'Fight', 'fighting', 'wtf', 'arrest')
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
require(plyr)
require(stringr)
list=lapply(sentences, function(sentence, pos.words, neg.words)
{
sentence = gsub('[[:punct:]]',' ',sentence)
sentence = gsub('[[:cntrl:]]','',sentence)
sentence = gsub('\\d+','',sentence)
sentence = gsub('\n','',sentence)
sentence = tolower(sentence)
word.list = str_split(sentence, '\\s+')
words = unlist(word.list)
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
pp=sum(pos.matches)
nn = sum(neg.matches)
score = sum(pos.matches) - sum(neg.matches)
list1=c(score, pp, nn)
return (list1)
}, pos.words, neg.words)
score_new=lapply(list, `[[`, 1)
pp1=score=lapply(list, `[[`, 2)
nn1=score=lapply(list, `[[`, 3)
scores.df = data.frame(score=score_new, text=sentences)
positive.df = data.frame(Positive=pp1, text=sentences)
negative.df = data.frame(Negative=nn1, text=sentences)
list_df=list(scores.df, positive.df, negative.df)
return(list_df)
}
options(max.print = 10000000)
install.packages("httr")
demonetization.tweets = searchTwitter("Demonetization", n=50000, geocode='21.146633,79.088860,1118mi',retryOnRateLimit = 25 )
demonetization.tweets = searchTwitter("Demonetization", n=50000, geocode='21.146633,79.088860,1118mi',retryOnRateLimit = 100)
demonetization.tweets = searchTwitter("Demonetization", n=50000, geocode='21.146633,79.088860,1118mi',retryOnRateLimit = 1000)
demonetization.tweets = searchTwitter("Demonetization", n=50000, retryOnRateLimit = 1000)
demonetization.tweets = searchTwitter("Demonetization", n=50000)
df <- do.call("rbind", lapply(demonetization.tweets, as.data.frame))
df$text <- sapply(df$text,function(row) iconv(row, "latin1", "ASCII", sub=""))
result = score.sentiment(df$text, pos.words, neg.words)
library(reshape)
test1=result[[1]]
test2=result[[2]]
test3=result[[3]]
test1$text=NULL
test2$text=NULL
test3$text=NULL
q1=test1[1,]
q2=test2[1,]
q3=test3[1,]
qq1=melt(q1, ,var='Score')
qq2=melt(q2, ,var='Positive')
qq3=melt(q3, ,var='Negative')
qq1['Score'] = NULL
qq2['Positive'] = NULL
qq3['Negative'] = NULL
table1 = data.frame(Text=result[[1]]$text, Score=qq1)
table2 = data.frame(Text=result[[2]]$text, Score=qq2)
table3 = data.frame(Text=result[[3]]$text, Score=qq3)
table_final=data.frame(Text=table1$Text, Score=table1$value, Positive=table2$value, Negative=table3$value)
p=table_final$Positive/(table_final$Positive+table_final$Negative)
p[ is.nan(p) ] <- 0
table_final$Postive_percentage=p
n=table_final$Positive/(table_final$Positive+table_final$Negative)
n[ is.nan(n) ] <- 0
#Positive Percentage
#Renaming
posSc=table_final$Positive
negSc=table_final$Negative
#Adding column
table_final$PosPercent = posSc/ (posSc+negSc)
#Replacing Nan with zero
pp = table_final$PosPercent
pp[is.nan(pp)] <- 0
table_final$PosPercent = pp
#Negative Percentage
#Adding column
table_final$NegPercent = negSc/ (posSc+negSc)
#Replacing Nan with zero
nn = table_final$NegPercent
nn[is.nan(nn)] <- 0
table_final$NegPercent = nn
??hist
#Good
Sc = table_final$Score
#Output of following is FALSE or TRUE
good <- sapply(Sc, function(Sc) Sc <= 2 && Sc > 0)
#Converts to actual value
Sc[good]
list_good = Sc[good]
value_good = length(list_good)
#Very good
#vgood <- sapply(Sc, function(Sc) Sc > 3 && Sc <6)
#Converts to actual value
#Sc[vgood]
#list_vgood = Sc[vgood]
#value_vgood = length(list_vgood)
#Outstanding
vvgood <- sapply(Sc, function(Sc) Sc >= 2)
#Converts to actual value
Sc[vvgood]
list_vvgood = Sc[vvgood]
value_vvgood = length(list_vvgood)
#Bad : Poor
#Output of following is FALSE or TRUE
bad <- sapply(Sc, function(Sc) Sc >= -2 && Sc < 0)
#Converts to actual value
Sc[bad]
list_bad = Sc[bad]
value_bad = length(list_bad)
#Very bad : Unsatisfactory
#Output of following is FALSE or TRUE
#vbad <- sapply(Sc, function(Sc) Sc < -3 && Sc > -6)
#Converts to actual value
#Sc[vbad]
#list_vbad = Sc[vbad]
#value_vbad = length(list_vbad)
#Awful
vvbad <- sapply(Sc, function(Sc) Sc <= -2)
#Converts to actual value
Sc[vvbad]
list_vvbad = Sc[vvbad]
value_vvbad = length(list_vvbad)
#Neutral
neutral <- sapply(Sc, function(Sc) Sc == 0)
list_neutral = Sc[neutral]
value_neutral = length(list_neutral)
library(plotrix)
slices1 <- c(value_good, value_vvbad, value_bad, value_neutral, value_vvgood )
lbls1 <- c("Good", "Awful", "Poor", "Neutral", "Outstanding")
pct <- round(slices1/sum(slices1)*100) #Percentage
lbls1 <- paste(lbls1, pct) # add percents to labels
lbls1 <- paste(lbls1,"%",sep="") # ad % to labels
pie(slices1,labels = lbls1, col=rainbow(length(lbls1)),
main="Sentiment Pie")
hist(table_final$Score, colour=rainbow(10))
hist(table_final$Score, colour=rainbow(10))
hist(table_final$Positive, colour=rainbow(10))
hist(table_final$Score, colour=rainbow(10))
hist(table_final$Positive, colour=rainbow(10))
hist(table_final$Negative, colour=rainbow(10))
hist(table_final$Positive, colour=rainbow(10))
pie(slices1,labels = lbls1, col=rainbow(length(lbls1)),
main="Sentiment Pie")
pie(slices1,labels = lbls1, col=rainbow(length(lbls1)),
main="Sentiment Pie")
#Good
Sc = table_final$Score
#Output of following is FALSE or TRUE
good <- sapply(Sc, function(Sc) Sc <= 2 && Sc > 0)
#Converts to actual value
Sc[good]
list_good = Sc[good]
value_good = length(list_good)
#Very good
#vgood <- sapply(Sc, function(Sc) Sc > 3 && Sc <6)
#Converts to actual value
#Sc[vgood]
#list_vgood = Sc[vgood]
#value_vgood = length(list_vgood)
#Outstanding
vvgood <- sapply(Sc, function(Sc) Sc >= 2)
#Converts to actual value
Sc[vvgood]
list_vvgood = Sc[vvgood]
value_vvgood = length(list_vvgood)
#Bad : Poor
#Output of following is FALSE or TRUE
bad <- sapply(Sc, function(Sc) Sc >= -2 && Sc < 0)
#Converts to actual value
Sc[bad]
list_bad = Sc[bad]
value_bad = length(list_bad)
#Very bad : Unsatisfactory
#Output of following is FALSE or TRUE
#vbad <- sapply(Sc, function(Sc) Sc < -3 && Sc > -6)
#Converts to actual value
#Sc[vbad]
#list_vbad = Sc[vbad]
#value_vbad = length(list_vbad)
#Awful
vvbad <- sapply(Sc, function(Sc) Sc <= -2)
#Converts to actual value
Sc[vvbad]
list_vvbad = Sc[vvbad]
value_vvbad = length(list_vvbad)
#Neutral
neutral <- sapply(Sc, function(Sc) Sc == 0)
list_neutral = Sc[neutral]
value_neutral = length(list_neutral)
library(plotrix)
slices1 <- c(value_good, value_vvbad, value_bad, value_neutral, value_vvgood )
lbls1 <- c("Good", "Awful", "Poor", "Neutral", "Outstanding")
pct <- round(slices1/sum(slices1)*100) #Percentage
lbls1 <- paste(lbls1, pct) # add percents to labels
lbls1 <- paste(lbls1,"%",sep="") # ad % to labels
pie(slices1,labels = lbls1, col=rainbow(length(lbls1)),
main="Sentiment Pie")
??pie
pie3D(slices1,labels = lbls1, col=rainbow(length(lbls1)),
main="Sentiment Pie")
pie(slices1,labels = lbls1, col=rainbow(length(lbls1)),
main="Sentiment Pie")
hist(table_final$Positive, colour=rainbow(10))
hist(table_final$Negative, colour=rainbow(1))
install.packages("plotrix")
hist(table_final$Negative, colour=rainbow(10))
hist(table_final$Positive, colour=rainbow(10))
hist(table_final$Negative, colour=rainbow(10))
library(wordcloud)
library(tm)
demonetization.tweets=searchTwitter("demonetization",n=50000)
df <- do.call("rbind", lapply(demonetization.tweets, as.data.frame))
df <- do.call("rbind", lapply(demonetization.tweets, as.data.frame))
demonetization_text <- sapply(df$text,function(row) iconv(row, "latin1", "ASCII", sub=""))
demo_corpus = Corpus(VectorSource(demonetization_text))
demo_clean = tm_map(demo_corpus, removePunctuation)
demo_clean = tm_map(demo_clean, content_transformer(tolower))
demo_clean <- tm_map(demo_clean, removeWords, c("demonetisation","demo","DeMo","https","youtube"))#removing search words
demo_clean = tm_map(demo_clean, removeNumbers)
demo_clean = tm_map(demo_clean, stripWhitespace)
wordcloud(demo_clean, random.order=F,max.words=80, col=rainbow(50), scale=c(4,0.13))
wordcloud(demo_clean, random.order=F,max.words=80, col=rainbow(50), scale=c(4,0.5))
wordcloud(demo_clean, random.order=F,max.words=100, col=rainbow(50), scale=c(4,0.5))
wordcloud(demo_clean, random.order=F,max.words=150, col=rainbow(100), scale=c(4,0.5))
demo_clean <- tm_map(demo_clean, removeWords, c("demonetisation","this","the","that","thats","jameswils","demo","DeMo","https","youtube"))#removing search words
demo_clean <- tm_map(demo_clean, removeWords, c("demonetisation","this","the","that","thats","jameswils","demo","DeMo","https","youtube","markdice"))#removing search words
wordcloud(demo_clean, random.order=F,max.words=100, col=rainbow(100), scale=c(4,0.5))
wordcloud(demo_clean, random.order=F,max.words=120, col=rainbow(100), scale=c(4,0.5))
??wordcloud
wordcloud(demo_clean, random.order=F,random.color=F,max.words=120, col=rainbow(50), scale=c(4,0.5))
wordcloud(demo_clean, random.order=F,random.color=F,max.words=120, col=rainbow(50), scale=c(4,0.5))
wordcloud(demo_clean, random.order=F,random.color=F,max.words=120, col=rainbow(25), scale=c(4,0.5))
wordcloud(demo_clean, random.order=F,random.color=T,max.words=80, col=rainbow(50), scale=c(4,0.5))
wordcloud(demo_clean, random.order=F,random.color=T,max.words=100, col=rainbow(50), scale=c(4,0.5))
wordcloud(demo_clean, random.order=F,random.color=T,max.words=110, col=rainbow(50), scale=c(4,0.5))
wordcloud(demo_clean, random.order=F,random.color=T,max.words=80, col=rainbow(50), scale=c(4,0.5))
wordcloud(demo_clean, random.order=F,random.color=T,max.words=80, col=rainbow(50), scale=c(4,0.5))
wordcloud(demo_clean, random.order=F,random.color=T,max.words=80, col=rainbow(50), scale=c(4,0.5))
#Good
Sc = table_final$Score
#Output of following is FALSE or TRUE
good <- sapply(Sc, function(Sc) Sc <= 1 && Sc > 0)
#Converts to actual value
Sc[good]
list_good = Sc[good]
value_good = length(list_good)
#Very good
#vgood <- sapply(Sc, function(Sc) Sc > 3 && Sc <6)
#Converts to actual value
#Sc[vgood]
#list_vgood = Sc[vgood]
#value_vgood = length(list_vgood)
#Outstanding
vvgood <- sapply(Sc, function(Sc) Sc >= 2)
#Converts to actual value
Sc[vvgood]
list_vvgood = Sc[vvgood]
value_vvgood = length(list_vvgood)
#Bad : Poor
#Output of following is FALSE or TRUE
bad <- sapply(Sc, function(Sc) Sc >= -1 && Sc < 0)
#Converts to actual value
Sc[bad]
list_bad = Sc[bad]
value_bad = length(list_bad)
#Very bad : Unsatisfactory
#Output of following is FALSE or TRUE
#vbad <- sapply(Sc, function(Sc) Sc < -3 && Sc > -6)
#Converts to actual value
#Sc[vbad]
#list_vbad = Sc[vbad]
#value_vbad = length(list_vbad)
#Awful
vvbad <- sapply(Sc, function(Sc) Sc <= -2)
#Converts to actual value
Sc[vvbad]
list_vvbad = Sc[vvbad]
value_vvbad = length(list_vvbad)
#Neutral
neutral <- sapply(Sc, function(Sc) Sc == 0)
list_neutral = Sc[neutral]
value_neutral = length(list_neutral)
library(plotrix)
slices1 <- c(value_good, value_vvbad, value_bad, value_neutral, value_vvgood )
lbls1 <- c("Good", "Awful", "Poor", "Neutral", "Outstanding")
pct <- round(slices1/sum(slices1)*100) #Percentage
lbls1 <- paste(lbls1, pct) # add percents to labels
lbls1 <- paste(lbls1,"%",sep="") # ad % to labels
pie(slices1,labels = lbls1, col=rainbow(length(lbls1)),
main="Sentiment Pie")
??pie
df <- do.call("rbind", lapply(demonetization.tweets, as.data.frame))
df$text <- sapply(df$text,function(row) iconv(row, "latin1", "ASCII", sub=""))
result = score.sentiment(df$text, pos.words, neg.words)
library(reshape)
test1=result[[1]]
test2=result[[2]]
test3=result[[3]]
test1$text=NULL
test2$text=NULL
test3$text=NULL
q1=test1[1,]
q2=test2[1,]
q3=test3[1,]
qq1=melt(q1, ,var='Score')
qq2=melt(q2, ,var='Positive')
qq3=melt(q3, ,var='Negative')
qq1['Score'] = NULL
qq2['Positive'] = NULL
qq3['Negative'] = NULL
table1 = data.frame(Text=result[[1]]$text, Score=qq1)
table2 = data.frame(Text=result[[2]]$text, Score=qq2)
table3 = data.frame(Text=result[[3]]$text, Score=qq3)
table_final=data.frame(Text=table1$Text, Score=table1$value, Positive=table2$value, Negative=table3$value)
p=table_final$Positive/(table_final$Positive+table_final$Negative)
p[ is.nan(p) ] <- 0
table_final$Postive_percentage=p
n=table_final$Positive/(table_final$Positive+table_final$Negative)
n[ is.nan(n) ] <- 0
table_final$Neg_percent=n
hist(table_final$Score, colour=rainbow(10))
hist(table_final$Positive, colour=rainbow(10))
hist(table_final$Negative, colour=rainbow(10))
#Good
Sc = table_final$Score
#Output of following is FALSE or TRUE
good <- sapply(Sc, function(Sc) Sc <= 1 && Sc > 0)
#Converts to actual value
Sc[good]
list_good = Sc[good]
value_good = length(list_good)
#Very good
#vgood <- sapply(Sc, function(Sc) Sc > 3 && Sc <6)
#Converts to actual value
#Sc[vgood]
#list_vgood = Sc[vgood]
#value_vgood = length(list_vgood)
#Outstanding
vvgood <- sapply(Sc, function(Sc) Sc >= 2)
#Converts to actual value
Sc[vvgood]
list_vvgood = Sc[vvgood]
value_vvgood = length(list_vvgood)
#Bad : Poor
#Output of following is FALSE or TRUE
bad <- sapply(Sc, function(Sc) Sc >= -1 && Sc < 0)
#Converts to actual value
Sc[bad]
list_bad = Sc[bad]
value_bad = length(list_bad)
#Very bad : Unsatisfactory
#Output of following is FALSE or TRUE
#vbad <- sapply(Sc, function(Sc) Sc < -3 && Sc > -6)
#Converts to actual value
#Sc[vbad]
#list_vbad = Sc[vbad]
#value_vbad = length(list_vbad)
#Awful
vvbad <- sapply(Sc, function(Sc) Sc <= -2)
#Converts to actual value
Sc[vvbad]
list_vvbad = Sc[vvbad]
value_vvbad = length(list_vvbad)
#Neutral
neutral <- sapply(Sc, function(Sc) Sc == 0)
list_neutral = Sc[neutral]
value_neutral = length(list_neutral)
library(plotrix)
slices1 <- c(value_good, value_vvbad, value_bad, value_neutral, value_vvgood )
lbls1 <- c("Good", "Awful", "Poor", "Neutral", "Outstanding")
pct <- round(slices1/sum(slices1)*100) #Percentage
lbls1 <- paste(lbls1, pct) # add percents to labels
lbls1 <- paste(lbls1,"%",sep="") # ad % to labels
pie(slices1,labels = lbls1, col=rainbow(length(lbls1)),
main="Sentiment Pie")
??pie
pie(slices1,labels = lbls1, col=rainbow(length(lbls1)),
main="Sentiment Pie")
#Good
Sc = table_final$Score
#Output of following is FALSE or TRUE
good <- sapply(Sc, function(Sc) Sc <= 1 && Sc > 0)
#Converts to actual value
Sc[good]
list_good = Sc[good]
value_good = length(list_good)
#Very good
#vgood <- sapply(Sc, function(Sc) Sc > 3 && Sc <6)
#Converts to actual value
#Sc[vgood]
#list_vgood = Sc[vgood]
#value_vgood = length(list_vgood)
#Outstanding
vvgood <- sapply(Sc, function(Sc) Sc >= 2)
#Converts to actual value
Sc[vvgood]
list_vvgood = Sc[vvgood]
value_vvgood = length(list_vvgood)
#Bad : Poor
#Output of following is FALSE or TRUE
bad <- sapply(Sc, function(Sc) Sc >= -1 && Sc < 0)
#Converts to actual value
Sc[bad]
list_bad = Sc[bad]
value_bad = length(list_bad)
#Very bad : Unsatisfactory
#Output of following is FALSE or TRUE
#vbad <- sapply(Sc, function(Sc) Sc < -3 && Sc > -6)
#Converts to actual value
#Sc[vbad]
#list_vbad = Sc[vbad]
#value_vbad = length(list_vbad)
#Awful
vvbad <- sapply(Sc, function(Sc) Sc <= -2)
#Converts to actual value
Sc[vvbad]
list_vvbad = Sc[vvbad]
value_vvbad = length(list_vvbad)
#Neutral
neutral <- sapply(Sc, function(Sc) Sc == 0)
list_neutral = Sc[neutral]
value_neutral = length(list_neutral)
library(plotrix)
slices1 <- c(value_good, value_vvbad, value_bad, value_neutral, value_vvgood )
lbls1 <- c("Good", "Awful", "Poor", "Neutral", "Outstanding")
pct <- round(slices1/sum(slices1)*100) #Percentage
lbls1 <- paste(lbls1, pct) # add percents to labels
lbls1 <- paste(lbls1,"%",sep="") # ad % to labels
pie(slices1,labels = lbls1, col=rainbow(length(lbls1)),
main="Sentiment Pie")
??pie
??pie
corrgram(slices1,labels = lbls1, col=rainbow(length(lbls1)),
main="Sentiment Pie")
library("googleVis")
gvisPieChart(slices1,labels = lbls1, col=rainbow(length(lbls1)),
main="Sentiment Pie")
pie(slices1,labels = lbls1, col=rainbow(length(lbls1)),
main="Sentiment Pie")
gvisPieChart(table_final)
gvisPieChart(sentiment.tweets)
source("Main Script.R")
source('G:/R/2016 Indian banknote demonetization/Polarity.R', echo=TRUE)
